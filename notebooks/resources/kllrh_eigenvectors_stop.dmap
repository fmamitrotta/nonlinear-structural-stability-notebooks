$ This file is part of the GitHub repository 
$ nonlinear-structural-stability-notebooks, created by Francesco M. A. 
$ Mitrotta.
$ The contribution of Mike Coleman from Hexagon to the development 
$ of this DMAP program is warmly acknowledged.
$ Copyright (C) 2024 Francesco Mario Antonio Mitrotta
$ 
$ Redistribution and use in source and binary forms, with or without 
$ modification, are permitted provided that the following conditions are
$ met:
$
$ 1. Redistributions of source code must retain the above copyright 
$    notice, this list of conditions and the following disclaimer.
$ 2. Redistributions in binary form must reproduce the above copyright 
$    notice, this list of conditions and the following disclaimer in the
$    documentation and/or other materials provided with the 
$    distribution.
$ 3. Neither the name of the copyright holder nor the names of its 
$    contributors may be used to endorse or promote products derived 
$    from this software without specific prior written permission.
$ 
$ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
$ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
$ LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
$ A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
$ HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
$ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
$ LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
$ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
$ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
$ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
$ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
$
$ This DMAP program is designed to extract the smallest-magnitude
$ eigenvalues and the corresponding eigenvectors of the tangent
$ stiffness matrix (KLLRH) at each converged increment of a nonlinear
$ static analysis. The eigenvalues and the eigenvectors are stored in
$ the output op2 file. The DMAP stops the analysis if a negative
$ eigenvalue is found.
$
ECHOOFF  $ do not print following commands to output file
compile nlstatic  $ request compilation of nlstatic solution sequence
$
$ Insert parameters definition at the start of the solution sequence
alter 2  $
type parm,,rs,y,lowereig=-1.e32 $ lower bound for eigenvalue extraction
type parm,,rs,y,uppereig=1.e32  $ upper bound for eigenvalue extraction
type parm,,rs,n,loadfmc         $ parameter for load factor
type parm,,i,y,bmodes=1         $ number of eigenvalues to be extracted
type parm,,i,n,nosort2=1        $ parameter for sorting of displacements
type parm,,i,y,bloop=0          $ counter of eigenvalues
$
$ Insert DMAP statements just before decomposition of KLLRH
alter 'ENDIF.*BUCKLE.-1 AND CONV.-1'  $
$
$ Check increment convergence before eigenvalue calculation
if (conv>0 and (newp=-1 or cbuckle>0)) then  $
$ con>0 checks that last increment has converged
$ newp=-1 checks convergence of first increment of subcase
$ cbuckle>0 allows eigenvalue calculation for last increment of subcase,
$ where newp=+1
$
$ Extract number of columns in tangent stiffness matrix (KLLRH)
PARAML KLLRH//'TRAILER'/1/S,N,NC//  $
$
MATGEN ,/IM/1/NC  $ create identity matrix of the same size as KLLRH
$
$ Calculate the lowest magnitude eigenvalues of KLLRH
READ KLLRH,IM,,,,,,,,,,,,/                                                     
     LAMA0,PH0,M0X,OEIGS0,LAMMAT0,/                                           
     'MODES'/S,N,NEIGV////-1/'LAN'/lowereig/uppereig//bmodes/0////                                
     FALSE/1.e7  $
$ LAMA0 - normal modes eigenvalue summary table
$ PH0 - normal modes eigenvector matrix in the a-set
$ M0X - modeal mass matrix
$ OEIGS0 - real eigenvalue extraction report
$ LAMMAT0 - diagonal matrix of eigenvalues
$
endif $
$
$ Extract parameter from ph0 datablock to test its presence
paraml ph0//'presence'////s,n,noph0  $
$
$ If ph0 datablock is present, noph0=0
if (noph0>-1) then  $
$
$ Compute displacements of constraint at the g-set
sdr1 usetnl,pg,ph0,uoo,ys,goa,gmnl,,,,,/ph0g,,/1/'bkl1'/-1  $
$ ph0g - displacement matrix in the g-set for all boundary conditions
$
loadfmc=real(loadfac)  $ convert load factor to real number
$
$ Create output table of eigenvectors datablock with SDR2
SDR2     CASESx2  , CSTMS  , MPTS   , DITS   , EQEXINS ,              
          , ETT    , LAMA0 , BGPDTs ,      ,              
          , ph0g    , EST   , , ,             
          ,        , , , ,              
          , , , EDT    ,         ,              
          ,    ,        ,        ,         ,              
          ,        ,        ,        ,         ,              
          ,        ,        ,        ,         ,              
          ,        ,        ,  ,         ,              
          ,        ,  ,        ,         ,              
          ,        /                                          
          ,        , Oug1   /                                 
          'bkl1'/S,N,NOSORT2//////                         
         //-1./-1.///FALSE/                                 
         ////////////////             
         LOADFMC/ $
$ oug1 - table of displacements in SORT2 format
$
$ Write eigenvector table onto op2 file
output2 oug1//0/12///'oug' $
$ 'oug' - NDDL name corresponding to OUG table
$
endif $
$
$ Initialize counter of eigenvalues
bloop=0 $ 
$
$ Loop over all eigenvalues
do while (bloop<neigv) $
$
$ Update counter
bloop=bloop+1 $
$
$ Extract current eigenvalue from diagonal matrix LAMMAT0
PARAML lammat0//'dmi'/bloop/bloop/s,n,leigvmc $
$
$ Check if current eigenvalue is negative
if (leigvmc<0.) then $
$
$ Set the DMAP flag controlling the nonlinear looping to FALSE
loopflag=FALSE $
$
$ Stop the do while loop
jump lenddo $
$
endif $
$
enddo $
$
$ Print message if negative eigenvalue has been found
if (loopflag=FALSE) then $
message //'Negative eigenvalue found. Stopping analysis.' $
endif $
$
$ Insert DMAP statements just before nonlinear buckling analysis
alter 'paraml *casesx2.*cmethod'  $
$
$ Stop nonlinear buckling analysis from occurring
if (cbuckle=2) then  $
cbuckle=-1  $
lbuckle=false  $
JUMP LENDDO  $
endif  $
$
ECHOON  $ print following commands to output file
